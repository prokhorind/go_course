//go:build ignore

package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	// CLI flags for flexibility
	handlerDir := flag.String("handler-dir", "handler", "Directory with handler files")
	outputFile := flag.String("output-file", "handler/generated_routes.go", "Output file path")
	outputPkg := flag.String("output-pkg", "handler", "Package name for generated file")

	flag.Parse()

	// Scan handler dir files
	files, err := filepath.Glob(filepath.Join(*handlerDir, "*.go"))
	if err != nil {
		log.Fatal(err)
	}

	if err := os.MkdirAll(filepath.Dir(*outputFile), 0755); err != nil {
		log.Fatal(err)
	}

	out, err := os.Create(*outputFile)
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	// Detect package name of handler dir from the first file
	handlerPkgName := detectPackageName(files)
	if handlerPkgName == "" {
		log.Fatal("Cannot detect handler package name")
	}

	fset := token.NewFileSet()

	// Collect route registrations
	var registrations []string

	for _, file := range files {
		// Skip the generated file if inside the handler dir (just in case)
		if filepath.Base(file) == filepath.Base(*outputFile) {
			continue
		}

		node, err := parser.ParseFile(fset, file, nil, parser.ParseComments)
		if err != nil {
			log.Fatal(err)
		}

		for _, decl := range node.Decls {
			fn, ok := decl.(*ast.FuncDecl)
			if !ok || fn.Doc == nil {
				continue
			}

			for _, comment := range fn.Doc.List {
				if strings.HasPrefix(comment.Text, "// @route ") {
					cmd := strings.TrimSpace(strings.TrimPrefix(comment.Text, "// @route "))
					registrations = append(registrations, fmt.Sprintf("\tRegisterRoute(%q, %s)", cmd, fn.Name.Name))
				}
			}
		}
	}

	// Write header + imports
	header := fmt.Sprintf(`// Code generated by generate_routes.go. DO NOT EDIT.
package %s

// Telegram is the interface for interacting with a chat
type Telegram interface {
	SendMessage(text string)
	ChatID() int64
}

// HandlerFunc defines a command handler
type HandlerFunc func(ctx Telegram)

// BotEngine runs the bot
type BotEngine interface {
	Run()
}

var routes = make(map[string]HandlerFunc)

func RegisterRoute(cmd string, handler HandlerFunc) {
	routes[cmd] = handler
}

func GetHandler(cmd string) (HandlerFunc, bool) {
	h, ok := routes[cmd]
	return h, ok
}


func init() {
`, *outputPkg)

	out.WriteString(header)

	for _, reg := range registrations {
		out.WriteString(reg + "\n")
	}

	out.WriteString("}\n")
}

func detectPackageName(files []string) string {
	if len(files) == 0 {
		return ""
	}
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, files[1], nil, parser.PackageClauseOnly)
	if err != nil {
		return ""
	}
	return node.Name.Name
}
